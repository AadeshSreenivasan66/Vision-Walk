import cv2
import numpy as np

def distance_to_camera(known_width, focal_length, per_width):
    return (known_width * focal_length) / per_width * 2.54  # Convert distance to centimeters

def perform_object_detection(weights_path, config_path, classes_path, known_distance, known_width):
    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FPS, 60)  # Set camera to 60 FPS for smoother video
    net = cv2.dnn.readNet(weights_path, config_path)

    with open(classes_path, 'r') as f:
        classes = [line.strip() for line in f.readlines()]

    focal_length = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        if frame is not None:
            width = frame.shape[1]
            height = frame.shape[0]

            if focal_length == 0:
                focal_length = (width * known_distance) / known_width

            blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
            net.setInput(blob)
            outs = net.forward(net.getUnconnectedOutLayersNames())

            objects = []

            for out in outs:
                for detection in out:
                    scores = detection[5:]
                    class_id = np.argmax(scores)
                    confidence = scores[class_id]
                    if confidence > 0.5:
                        center_x = int(detection[0] * width)
                        center_y = int(detection[1] * height)
                        w = int(detection[2] * width)
                        h = int(detection[3] * height)
                        x = int(center_x - w / 2)
                        y = int(center_y - h / 2)
                        per_width = w
                        distance_cm = distance_to_camera(known_width, focal_length, per_width)
                        objects.append((classes[class_id], distance_cm, x, y, w, h))

            for obj, distance, x, y, w, h in objects:
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                cv2.putText(frame, f"{obj}: {round(distance, 2)} cm", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

            cv2.imshow('Object Detection Webcam', frame)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

    cap.release()
    cv2.destroyAllWindows()

# Call the perform_object_detection function with the corrected paths and distance parameters
perform_object_detection('D:/Users/Dell/Desktop/HackNova 1/yolov3.weights', 'D:/Users/Dell/Desktop/HackNova 1/yolov3 config.cfg', 'D:/Users/Dell/Desktop/HackNova 1/coco.names', known_distance=24, known_width=11)
